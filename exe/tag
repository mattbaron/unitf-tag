#!/usr/bin/env ruby

$LOAD_PATH.unshift("#{__dir__}/../lib")

require 'logger'
require 'optparse'
require 'unitf/tag'
require 'unitf/logging'

UnitF::Log.to_console

actions = []
opt = {}
properties = {}

auto_track = []

no_args = ARGV.empty?

targets = OptionParser.new do |opts|
  opts.on('-r', '--recursive', 'Auto Cover') do
    opt[:recursive] = true
  end

  opts.on('--dump', 'Dump Tags') do
    opt[:dump] = true
  end

  opts.on('-d', '--debug', 'Debug') do
    UnitF::Tag.logger.level = Logger::DEBUG
  end

  opts.on('-j', '--json', 'JSON Output') do
    opt[:format] = :json
  end

  opts.on('-l', '--line', 'Single Line Output') do
    opt[:format] = :line
  end

  opts.on('--cover COVER', 'Cover') do |arg|
    actions << :cover
    raise "Invalid cover file #{arg}" unless File.exist?(arg) && arg.downcase.end_with?('.jpg')
    opt[:cover] = arg
  end

  opts.on('--auto_cover', '--auto-cover', 'Auto Cover') do
    actions << :auto_cover
  end

  opts.on('--delete_cover', '--delete-cover', 'Delete Cover') do
    actions << :delete_cover
  end

  opts.on('--auto_tag', '--auto-tag', 'Auto Tag') do
    actions << :auto_tag
  end

  opts.on('--auto_tags', '--auto-tags', 'Auto Tags') do
    actions << :auto_tags
  end

  opts.on('--auto_track DIR', '--auto-track DIR', 'Auto Track') do |dir|
    auto_track << dir
  end

  opts.on('-f', '--force', 'Force') do
    opt[:force] = true
  end

  opts.on('--artist ARTIST', 'Artist') do |arg|
    properties[:artist] = arg
  end

  opts.on('--album ALBUM', 'Album') do |arg|
    properties[:album] = arg
  end

  opts.on('--title TITLE', 'Song Title') do |arg|
    properties[:title] = arg
  end

  opts.on('--year YEAR', 'Song Year') do |arg|
    properties[:year] = arg.to_i
  end

  opts.on('--genre GENRE', 'Genre') do |arg|
    properties[:genre] = arg
  end

  opts.on('--track TRACK', 'Song Track') do |arg|
    properties[:track] = arg.to_i
  end
end.parse!

auto_track.each do |dir|
  UnitF::Tag.auto_track(dir)
rescue StandardError => e
  UnitF::Log.warn(e.message)
end

targets = Dir.glob('*') if no_args
files = UnitF::Tag::FileSet.new(targets)

exit(0) if files.empty?

if actions.empty? && properties.empty?
  UnitF::Tag.list(files, format: opt[:format])
  exit 0
end

files.each do |file|
  UnitF::Log.info("Processing file: #{file}")

  file.update do |f|
    f.properties!(properties) unless properties.empty?

    actions.each do |action|
      case action
      when :cover
        f.cover!(opt[:cover])
      when :delete_cover
        f.delete_cover!
      when :auto_cover
        f.auto_cover!
      when :auto_tag
        f.auto_tag!
      when :auto_tags
        puts "\tauto_tags: #{f.auto_tags}\n\n"
      end
    end
  end
end
